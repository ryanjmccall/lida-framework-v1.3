/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.text.DecimalFormat;
import java.util.Collection;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.actionselection.Action;
import edu.memphis.ccrg.lida.actionselection.ActionSelection;
import edu.memphis.ccrg.lida.actionselection.ActionSelectionListener;
import edu.memphis.ccrg.lida.actionselection.Behavior;
import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.ModuleName;
import edu.memphis.ccrg.lida.framework.tasks.TaskManager;

/**
 * A {@link GuiPanel} which displays the current {@link Behavior} elements in
 * the {@link ActionSelection} module.
 * 
 * @author Ryan J. McCall
 */
public class ActionSelectionPanel extends GuiPanelImpl implements
		ActionSelectionListener {

	private static final Logger logger = Logger
			.getLogger(ActionSelectionPanel.class.getCanonicalName());
	private static final int DEFAULT_SELECTED_ACTIONS_SIZE = 10;

	private FrameworkModule module;
	private Collection<Behavior> behaviors;
	private Behavior[] behaviorArray = new Behavior[0];

	private LinkedList<ActionDetail> selectedActions = new LinkedList<ActionDetail>();
	private int selectedActionsSize;

	/** Creates new form ActionSelectionPanel */
	public ActionSelectionPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		jToolBar1 = new javax.swing.JToolBar();
		refreshButton = new javax.swing.JButton();
		jSplitPane = new javax.swing.JSplitPane();
		winnersPane = new javax.swing.JScrollPane();
		winnersTable = new javax.swing.JTable();
		behaviorsPane = new javax.swing.JScrollPane();
		behaviorsTable = new javax.swing.JTable();

		jToolBar1.setRollover(true);

		refreshButton.setText("Refresh");
		refreshButton.setFocusable(false);
		refreshButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		refreshButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		jSplitPane.setDividerLocation(150);
		jSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

		winnersTable.setModel(new SelectedBehaviorsTableModel());
		winnersPane.setViewportView(winnersTable);

		jSplitPane.setRightComponent(winnersPane);

		behaviorsTable.setModel(new BehaviorTableModel());
		behaviorsPane.setViewportView(behaviorsTable);

		jSplitPane.setLeftComponent(behaviorsPane);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400,
				Short.MAX_VALUE).addGroup(
				layout.createSequentialGroup().addComponent(jToolBar1,
						javax.swing.GroupLayout.DEFAULT_SIZE, 390,
						Short.MAX_VALUE).addContainerGap()).addComponent(
				jSplitPane, javax.swing.GroupLayout.Alignment.TRAILING,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGap(0, 306, Short.MAX_VALUE)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jToolBar1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												25,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jSplitPane,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												275, Short.MAX_VALUE)));
	}// </editor-fold>

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {
		refresh();
	}

	// Variables declaration - do not modify
	private javax.swing.JScrollPane behaviorsPane;
	private javax.swing.JTable behaviorsTable;
	private javax.swing.JSplitPane jSplitPane;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton refreshButton;
	private javax.swing.JScrollPane winnersPane;
	private javax.swing.JTable winnersTable;

	// End of variables declaration

	@Override
	public void initPanel(String[] param) {
		module = agent.getSubmodule(ModuleName.ActionSelection);
		if (module == null) {
			logger
					.log(Level.WARNING,
							"Error initializing panel, Module does not exist in agent.");
		} else {
			module.addListener(this);
		}

		selectedActionsSize = DEFAULT_SELECTED_ACTIONS_SIZE;

		if (param.length > 0) {
			try {
				selectedActionsSize = Integer.parseInt(param[0]);
			} catch (NumberFormatException e) {
				logger.log(Level.WARNING,
						"parse error, using default selectActionsSize");
			}
		} else {
			logger.log(Level.INFO, "using default selectActionsSize");
		}
	}

	@Override
	public void refresh() {
		display(module.getModuleContent("behaviors"));
	}

	@SuppressWarnings("unchecked")
	@Override
	public void display(Object o) {
		if (o != null) {
			behaviors = (Collection<Behavior>) o;
			behaviorArray = behaviors.toArray(new Behavior[0]);

			((AbstractTableModel) behaviorsTable.getModel())
					.fireTableStructureChanged();
			((AbstractTableModel) winnersTable.getModel())
					.fireTableStructureChanged();
		}
	}

	private class BehaviorTableModel extends AbstractTableModel {
		private String[] columNames = { "Behavior Label", "Activation",
				"Context", "Action", "Adding Result", "Deleting Result" };
		private DecimalFormat df = new DecimalFormat("0.0000");

		@Override
		public int getColumnCount() {
			return columNames.length;
		}

		@Override
		public int getRowCount() {
			return behaviorArray.length;
		}

		@Override
		public String getColumnName(int column) {
			if (column < columNames.length) {
				return columNames[column];
			}
			return "";
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			if (rowIndex > behaviorArray.length
					|| columnIndex > columNames.length || rowIndex < 0
					|| columnIndex < 0) {
				return null;
			}
			Behavior behavior = behaviorArray[rowIndex];

			switch (columnIndex) {
			case 0:
				return behavior.getLabel();
			case 1:
				return df.format(behavior.getActivation());
			case 2:
				return behavior.getContextConditions();
			case 3:
				return behavior.getAction().getLabel();
			case 4:
				return behavior.getAddingList();
			case 5:
				return behavior.getDeletingList();
			default:
				return "";
			}

		}
	}

	private class SelectedBehaviorsTableModel extends AbstractTableModel {

		private String[] columnNames = { "Tick at Selection",
				"Selection Count", "Action" };

		// private DecimalFormat df = new DecimalFormat("0.0000");

		@Override
		public int getColumnCount() {
			return columnNames.length;
		}

		@Override
		public int getRowCount() {
			return selectedActions.size();
		}

		@Override
		public String getColumnName(int column) {
			if (column < columnNames.length) {
				return columnNames[column];
			}
			return "";
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			if (rowIndex > selectedActions.size() || rowIndex < 0
					|| columnIndex > columnNames.length || columnIndex < 0) {
				return null;
			}
			ActionDetail behaviorDetail = selectedActions.get(rowIndex);
			switch (columnIndex) {
			case 0:
				return behaviorDetail.getTickAtSelection();
			case 1:
				return behaviorDetail.getSelectedActionCount();
			case 2:
				return behaviorDetail.getAction().getLabel();
			default:
				return "";
			}
		}
	}

	private class ActionDetail {
		private final long tick;
		private final int selectedActionCount;
		private final Action action;

		public ActionDetail(long t, int count, Action a) {
			tick = t;
			selectedActionCount = count;
			action = a;
		}

		public long getTickAtSelection() {
			return tick;
		}

		public int getSelectedActionCount() {
			return selectedActionCount;
		}

		public Action getAction() {
			return action;
		}
	}

	private int currentSelectionCount;

	@Override
	public void receiveAction(Action action) {
		ActionDetail detail = new ActionDetail(TaskManager.getCurrentTick(),
				currentSelectionCount++, action);
		synchronized (this) {
			selectedActions.addFirst(detail);
			if (selectedActions.size() > selectedActionsSize) {
				selectedActions.pollLast();
			}
		}
	}
}
