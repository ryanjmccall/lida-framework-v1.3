/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NodeStructureTable.java
 *
 * Created on Jun 6, 2011, 5:15:10 PM
 */
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.framework.FrameworkModule;
import edu.memphis.ccrg.lida.framework.gui.utils.GuiUtils;
import edu.memphis.ccrg.lida.framework.shared.Node;
import edu.memphis.ccrg.lida.framework.shared.NodeStructure;
import edu.memphis.ccrg.lida.framework.shared.activation.Learnable;
import edu.memphis.ccrg.lida.framework.tasks.TaskManager;
import edu.memphis.ccrg.lida.pam.PerceptualAssociativeMemoryImpl;

/**
 * A {@link GuiPanel} which displays the attributes of a {@link NodeStructure}
 * in a table.
 * 
 * @author Javier Snaider
 */
public class NodeStructureTable extends GuiPanelImpl {

	private static final Logger logger = Logger
			.getLogger(NodeStructureTable.class.getCanonicalName());
	private NodeStructure nodeStructure;
	private FrameworkModule module;
	private NodeStructureTableModel nodeStructureTableModel;

	/** Creates new form NodeStructureTable */
	public NodeStructureTable() {
		nodeStructureTableModel = new NodeStructureTableModel();
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jToolBar1 = new javax.swing.JToolBar();
		refreshButton = new javax.swing.JButton();
		nodeStructurePane = new javax.swing.JScrollPane();
		nodeStructureTable = new javax.swing.JTable();

		jToolBar1.setRollover(true);

		refreshButton.setText("Refresh");
		refreshButton.setFocusable(false);
		refreshButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		refreshButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		nodeStructureTable.setModel(nodeStructureTableModel);
		nodeStructureTable
				.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
		nodeStructureTable.setMaximumSize(new java.awt.Dimension(1000, 1000));
		nodeStructurePane.setViewportView(nodeStructureTable);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400,
				Short.MAX_VALUE).addGroup(
				layout.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(nodeStructurePane,
								javax.swing.GroupLayout.Alignment.TRAILING,
								javax.swing.GroupLayout.DEFAULT_SIZE, 400,
								Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addComponent(jToolBar1,
						javax.swing.GroupLayout.PREFERRED_SIZE, 25,
						javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(275, Short.MAX_VALUE)).addGroup(
				layout.createParallelGroup(
						javax.swing.GroupLayout.Alignment.LEADING).addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addGap(27, 27, 27)
								.addComponent(nodeStructurePane,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										273, Short.MAX_VALUE))));
	}// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		refresh();
	}// GEN-LAST:event_refreshButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JScrollPane nodeStructurePane;
	private javax.swing.JTable nodeStructureTable;
	private javax.swing.JButton refreshButton;
	// End of variables declaration//GEN-END:variables

	/**
	 * Definition of this Panel should include a parameter for the ModuleName
	 * for the module from which the NodeStructure will be obtained. E.g.,
	 * workspace.PerceptualBuffer or PerceptualAssociativeMemory
	 * 
	 * @see edu.memphis.ccrg.lida.framework.gui.panels.GuiPanelImpl#initPanel(java.lang.String[])
	 */
	@Override
	public void initPanel(String[] param) {
		if (param == null || param.length == 0) {
			logger
					.log(
							Level.WARNING,
							"Error initializing NodeStructureTable, not enough parameters.",
							0L);
			return;
		}
		module = GuiUtils.parseFrameworkModule(param[0], agent);

		if (module != null) {
			display(module.getModuleContent());
		} else {
			logger.log(Level.WARNING,
					"Unable to parse module {1}. Panel not initialized.",
					new Object[] { 0L, param[0] });
		}
	}

	@Override
	public void refresh() {
		display(module.getModuleContent());
	}
	@Override
	public void display(Object o) {
		if (o instanceof NodeStructure) {
			nodeStructure = (NodeStructure) o;
			((AbstractTableModel) nodeStructureTable.getModel())
					.fireTableStructureChanged();
		} else {
			logger.log(Level.WARNING,
							"Can only display NodeStructure, but received {1} from module {2}",
							new Object[] {TaskManager.getCurrentTick(),o,module});
		}
	}

	/*
	 * Implementation of abstract table model to adapt a NodeStructure to a
	 * Table. Columns are the attributes of the Nodes in the NodeStructure. Rows
	 * are the Nodes.
	 * 
	 * @author Javier Snaider
	 * @author Ryan
	 */
	private class NodeStructureTableModel extends AbstractTableModel {
		// Support links as well
		private DecimalFormat df = new DecimalFormat("0.0000");
		private String[] columnNames = {"Node Label", "ID", 
				"Base-Level Activation", "Current Activation", 
				"Base-Level Incentive Salience", "Current Incentive Salience", 
									"Percept Threshold"};

		@Override
		public int getColumnCount() {
			return columnNames.length;
		}
		@Override
		public int getRowCount() {
			return nodeStructure.getNodeCount();
		}
		@Override
		public String getColumnName(int column) {
			if (column < columnNames.length) {
				return columnNames[column];
			}
			return "";
		}

		/**
		 * Depending on the columnIndex, the appropriate method is called to get
		 * an attribute of the Node.
		 * 
		 * @param rowIndex the index of the row being filled in
		 * @param columnIndex the index of the attribute being asked for
		 * @see javax.swing.table.TableModel#getValueAt(int, int)
		 */
		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			Object value = "";
			Object[] nodes = nodeStructure.getNodes().toArray();
			if (rowIndex >= 0 && rowIndex < nodes.length &&
						columnIndex >= 0 &&	columnIndex < columnNames.length) {				
				Node node = (Node) nodes[rowIndex];
				switch (columnIndex) {
					case 0:
						value = node.getLabel();
						break;
					case 1:
						value = node.getId();
						break;
					case 2:
						if (node instanceof Learnable) {
							value = df.format(((Learnable)node).getBaseLevelActivation());
						}
						break;
					case 3:
						value = df.format(node.getActivation());
						break;
					case 4:
						if (node instanceof Learnable) {
							value = df.format(((Learnable) node).getBaseLevelIncentiveSalience());
						}
						break;
					case 5:
						value = df.format(node.getIncentiveSalience());	
						break;
					case 6:
						value = df.format(PerceptualAssociativeMemoryImpl.getPerceptThreshold());
						break;
					default:
						break;
				}
			}				
			return value;
		}//method
		
	}//table model
}
