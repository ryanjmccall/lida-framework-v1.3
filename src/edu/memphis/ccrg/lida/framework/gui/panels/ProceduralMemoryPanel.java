/*******************************************************************************
 * Copyright (c) 2009, 2011 The University of Memphis.  All rights reserved. 
 * This program and the accompanying materials are made available 
 * under the terms of the LIDA Software Framework Non-Commercial License v1.0 
 * which accompanies this distribution, and is available at
 * http://ccrg.cs.memphis.edu/assets/papers/2010/LIDA-framework-non-commercial-v1.0.pdf
 *******************************************************************************/
package edu.memphis.ccrg.lida.framework.gui.panels;

import java.text.DecimalFormat;
import java.util.Collection;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.table.AbstractTableModel;

import edu.memphis.ccrg.lida.framework.ModuleName;
import edu.memphis.ccrg.lida.proceduralmemory.Condition;
import edu.memphis.ccrg.lida.proceduralmemory.ProceduralMemory;
import edu.memphis.ccrg.lida.proceduralmemory.Scheme;

/**
 * A {@link GuiPanel} to display the {@link Scheme} elements of
 * {@link ProceduralMemory}
 * 
 * @author Ryan J. McCall
 */
public class ProceduralMemoryPanel extends GuiPanelImpl {

	private static final Logger logger = Logger
			.getLogger(ProceduralMemoryPanel.class.getCanonicalName());
	private Collection<Scheme> schemes;
	private Scheme[] schemeArray = new Scheme[0];
	private ProceduralMemory module;

	/** Creates new form ProceduralMemoryPanel */
	public ProceduralMemoryPanel() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		jToolBar1 = new javax.swing.JToolBar();
		refreshButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		schemeTable = new javax.swing.JTable();

		jToolBar1.setRollover(true);

		refreshButton.setText("Refresh");
		refreshButton.setFocusable(false);
		refreshButton
				.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		refreshButton
				.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		refreshButton.addActionListener(new java.awt.event.ActionListener() {
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				refreshButtonActionPerformed(evt);
			}
		});
		jToolBar1.add(refreshButton);

		schemeTable.setModel(new SchemeTableModel());
		jScrollPane1.setViewportView(schemeTable);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 400,
				Short.MAX_VALUE).addComponent(jScrollPane1,
				javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE));
		layout
				.setVerticalGroup(layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								layout
										.createSequentialGroup()
										.addComponent(
												jToolBar1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												25,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												278, Short.MAX_VALUE)));
	}// </editor-fold>//GEN-END:initComponents

	private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_refreshButtonActionPerformed
		refresh();
	}// GEN-LAST:event_refreshButtonActionPerformed

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JToolBar jToolBar1;
	private javax.swing.JButton refreshButton;
	private javax.swing.JTable schemeTable;

	// End of variables declaration//GEN-END:variables

	@Override
	public void initPanel(String[] param) {
		module = (ProceduralMemory) agent
				.getSubmodule(ModuleName.ProceduralMemory);
		if (module == null) {
			logger
					.log(
							Level.WARNING,
							"Error initializing ProceduralMemoryPanel, Module does not exist in agent.",
							0L);
			return;
		}
	}

	@Override
	public void refresh() {
		display(module.getModuleContent("schemes"));
	}

	@SuppressWarnings("unchecked")
	@Override
	public void display(Object o) {
		schemes = (Collection<Scheme>) o;
		schemeArray = schemes.toArray(new Scheme[0]);

		((AbstractTableModel) schemeTable.getModel())
				.fireTableStructureChanged();
	}

	private class SchemeTableModel extends AbstractTableModel {

		private String[] columNames = { "Scheme Label", "ID",
				"Current Activation", "Base-level Activation", "Context",
				"Action", "Adding Result", "Deleting Result" };
		private DecimalFormat df = new DecimalFormat("0.0000");

		@Override
		public int getColumnCount() {
			return columNames.length;
		}

		@Override
		public int getRowCount() {
			return schemeArray.length;
		}

		@Override
		public String getColumnName(int column) {
			if (column < columNames.length) {
				return columNames[column];
			}
			return "";
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			if (rowIndex > schemeArray.length || rowIndex < 0
					|| columnIndex > columNames.length || columnIndex < 0) {
				return null;
			}
			Scheme scheme = schemeArray[rowIndex];
			switch (columnIndex) {
			case 0:
				return scheme.getLabel();
			case 1:
				return scheme.getId();
			case 2:
				return df.format(scheme.getActivation());
			case 3:
				return df.format(scheme.getBaseLevelActivation());
			case 4:
				return generateConditionsString(scheme.getContextConditions());
			case 5:
				return scheme.getAction().getLabel();
			case 6:
				return generateConditionsString(scheme.getAddingList());
			case 7:
				return generateConditionsString(scheme.getDeletingList());
			default:
				return "";
			}

		}

		private String generateConditionsString(Collection<Condition> conditions) {
			if (conditions == null) {
				return "";
			}
			StringBuilder res = new StringBuilder();
			for (Condition c : conditions) {
				res.append(c.toString());
				res.append(",");
			}
			return res.toString();
		}
	}
}
